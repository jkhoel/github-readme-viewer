{"version":3,"sources":["components/GithubContext/index.jsx","components/MarkdownBrowser/index.jsx","components/ImageModalContext/index.jsx","components/MenuTree/MenuNode.jsx","components/MenuTree/index.jsx","components/RepoMenu/index.jsx","components/ImageModalContext/ImageModal.jsx","App.js","serviceWorker.js","index.js"],"names":["GithubContext","React","createContext","data","endpoint","setData","setEndpoint","GithubContextProvider","Consumer","_ref","children","root","rootFile","_React$useState","useState","concat","_React$useState2","Object","slicedToArray","_React$useState3","_React$useState4","useEffect","Axios","get","then","res","catch","err","console","log","react_default","a","createElement","Provider","value","defaultProps","MarkdownBrowser","_React$useContext","useContext","renderers","link","props","className","onClick","href","image","alt","src","Fragment","with_html_default","source","escapeHtml","ImageModalContext","show","toggleModal","setSource","ImageModalContextProvider","StyledTreeNode","styled","div","_templateObject","getPaddingLeft","level","type","NodeIcon","_templateObject2","marginRight","color","paddingLeft","getFileType","name","split","pop","toLowerCase","MenuNode","node","getChildNodes","onToggle","_React$useContext2","download_url","onClickSelector","isOpen","CaretDown_esm","size","CaretRight_esm","FolderOpen_esm","Folder_esm","CodeCurly_esm","CodeAlt_esm","InfoCircle_esm","FilePdf_esm","Hashtag_esm","Image_esm","File_esm","iconSelector","role","map","childNode","key","path","StyledTreeContainer","MenuTree_templateObject","MenuTree","nodes","setNodes","values","find","el","indexOfParent","findIndex","objectSpread","filter","isRoot","MenuTree_MenuNode","createNode","url","getFileTree","_callee","result","parent","files","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","forEach","n","push","sent","abrupt","stop","RepoMenu","components_MenuTree","ModalContainer","ImageModal_templateObject","ModalImage","img","ImageModal_templateObject2","ImageModal","App","ImageModalContext_ImageModalContextProvider","styled_grid_component_es","width","height","templateColumns","gap","autoRows","GithubContext_GithubContextProvider","column","row","components_RepoMenu","components_MarkdownBrowser","ImageModalContext_ImageModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.854fdfdc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GithubContext = React.createContext({\r\n  data: null,\r\n  endpoint: null,\r\n  setData: () => null,\r\n  setEndpoint: () => null\r\n});\r\n\r\nexport const GithubContextConsumer = GithubContext.Consumer;\r\n\r\nexport const GithubContextProvider = ({ children, root, rootFile }) => {\r\n  const [endpoint, setEndpoint] = React.useState(`${root}${rootFile}`);\r\n\r\n  const [data, setData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    if (endpoint) {\r\n      Axios.get(endpoint)\r\n        .then(res => setData(res.data))\r\n        .catch(err => console.log(err));\r\n    }\r\n  }, [endpoint]);\r\n\r\n  return (\r\n    <GithubContext.Provider value={{ data, root, endpoint, setEndpoint }}>\r\n      {children}\r\n    </GithubContext.Provider>\r\n  );\r\n};\r\n\r\nGithubContextProvider.propTypes = {\r\n  children: PropTypes.array,\r\n  root: PropTypes.string.isRequired,\r\n  rootFile: PropTypes.string.isRequired\r\n};\r\n\r\nGithubContextProvider.defaultProps = {\r\n  children: {},\r\n  root: null,\r\n  rootFile: null\r\n};\r\n","import React from 'react'\r\nimport { GithubContext } from '../GithubContext'\r\nimport ReactMarkdown from 'react-markdown/with-html'\r\n\r\nconst MarkdownBrowser = () => {\r\n    const { data, root, setEndpoint } = React.useContext(GithubContext)\r\n    const renderers = {\r\n        link: props => {\r\n            return <button className='btn-link' onClick={() => setEndpoint(`${root}${props.href}`)}>{props.children}</button>\r\n        },\r\n        image: props => <img alt={props.alt} src={`${root}${props.src}`} onClick={() => console.log(props)} />\r\n    }\r\n\r\n    if (data) {\r\n        return (\r\n            <React.Fragment>\r\n                <ReactMarkdown source={data} escapeHtml={false} renderers={renderers} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>Loading...</div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MarkdownBrowser","import React from 'react';\r\n// import styled from 'styled-components';\r\n\r\n// const ModalContainer = styled.div`\r\n//   visibility: ${props => (props.show ? 'visible' : 'hidden')};\r\n//   background: #000000c2;\r\n//   background: #444444;\r\n//   border: 1px solid #222;\r\n//   padding: 0.5em;\r\n//   box-shadow: -2rem 2rem 2rem rgba(black, 0.2);\r\n//   z-index: 1000;\r\n\r\n//   position: relative;\r\n//   height: 100%;\r\n//   width: 100%;\r\n// `;\r\n\r\n// const ModalImage = styled.img`\r\n//   max-width: 100vw;\r\n//   display: block;\r\n//   margin-left: auto;\r\n//   margin-right: auto;\r\n// `;\r\n\r\nexport const ImageModalContext = React.createContext({\r\n  show: false,\r\n  source: null,\r\n  toggleModal: () => null,\r\n  setSource: () => null\r\n});\r\n\r\nexport const ImageModalContextConsumer = ImageModalContext.Consumer;\r\n\r\nconst testImage =\r\n  'https://raw.githubusercontent.com/132nd-vWing/OPUF-Brief/master/Images/Bandarejask_airfield.PNG';\r\n\r\nexport const ImageModalContextProvider = ({ children }) => {\r\n  const [show, toggleModal] = React.useState(false);\r\n  const [source, setSource] = React.useState(testImage);\r\n\r\n  return (\r\n    <ImageModalContext.Provider\r\n      value={{ show, toggleModal, source, setSource }}\r\n    >\r\n      {children}\r\n    </ImageModalContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { GithubContext } from '../GithubContext';\r\nimport { ImageModalContext } from '../ImageModalContext';\r\n\r\nimport {\r\n  CaretDown,\r\n  CaretRight,\r\n  Hashtag,\r\n  Folder,\r\n  FolderOpen,\r\n  FilePdf\r\n} from 'styled-icons/fa-solid';\r\n\r\nimport { File } from 'styled-icons/boxicons-solid';\r\n\r\nimport {\r\n  CodeCurly,\r\n  CodeAlt,\r\n  InfoCircle,\r\n  Image\r\n} from 'styled-icons/boxicons-regular';\r\n\r\nconst StyledTreeNode = styled.div`\r\n  display: flex;\r\n  flex-direction: right;\r\n  align-items: center;\r\n  padding: 5px 8px;\r\n  padding-left: ${props => getPaddingLeft(props.level, props.type)}px;\r\n  cursor: pointer;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background: #2a2d2e;\r\n  }\r\n`;\r\n\r\nconst NodeIcon = styled.div`\r\n  font-size: 16px;\r\n  margin-right: ${props => (props.marginRight ? props.marginRight : 5)}px;\r\n  color: ${props => (props.color ? props.color : 'inherit')};\r\n`;\r\n\r\nconst getPaddingLeft = (level, type) => {\r\n  let paddingLeft = level * 20;\r\n  if (type === 'file') paddingLeft += 20;\r\n  return paddingLeft;\r\n};\r\n\r\nconst getFileType = name => {\r\n  return name\r\n    .split('.')\r\n    .pop()\r\n    .toLowerCase();\r\n};\r\n\r\nconst iconSelector = (node, onClick) => {\r\n  switch (true) {\r\n    case node.type === 'dir' && node.isOpen:\r\n      return <FolderOpen size=\"16\" color=\"orange\" />;\r\n\r\n    case node.type === 'dir' && !node.isOpen:\r\n      return <Folder size=\"16\" color=\"orange\" />;\r\n\r\n    case node.type === 'file' && getFileType(node.name) === 'json':\r\n      return <CodeCurly size=\"16\" color=\"yellow\" />;\r\n\r\n    case node.type === 'file' && getFileType(node.name) === 'js':\r\n      return <CodeAlt size=\"16\" color=\"yellow\" />;\r\n\r\n    case node.type === 'file' && getFileType(node.name) === 'jsx':\r\n      return <CodeAlt size=\"16\" color=\"cornflowerblue\" />;\r\n\r\n    case node.type === 'file' && getFileType(node.name) === 'md':\r\n      return <InfoCircle size=\"16\" color=\"cornflowerblue\" />;\r\n\r\n    case node.type === 'file' && getFileType(node.name) === 'pdf':\r\n      return <FilePdf size=\"16\" color=\"orange\" />;\r\n\r\n    case node.type === 'file' &&\r\n      (getFileType(node.name) === 'css' ||\r\n        getFileType(node.name) === 'scss' ||\r\n        getFileType(node.name) === 'less'):\r\n      return <Hashtag size=\"16\" color=\"cornflowerblue\" />;\r\n\r\n    case node.type === 'file' &&\r\n      (getFileType(node.name) === 'png' ||\r\n        getFileType(node.name) === 'gif' ||\r\n        getFileType(node.name) === 'jpg' ||\r\n        getFileType(node.name) === 'jpeg'):\r\n      return <Image size=\"16\" color=\"cyan\" />;\r\n\r\n    default:\r\n      return <File size=\"16\" color=\"gray\" />;\r\n  }\r\n};\r\n\r\nconst MenuNode = ({ node, getChildNodes, level, onToggle }) => {\r\n  const { setEndpoint } = React.useContext(GithubContext);\r\n  const { toggleModal, setSource } = React.useContext(ImageModalContext);\r\n\r\n  const onClickSelector = node => {\r\n    switch (true) {\r\n      case node.type === 'dir':\r\n        return onToggle(node);\r\n      case node.type === 'file' && getFileType(node.name) === 'md':\r\n        toggleModal(false);\r\n        setEndpoint(node.download_url);\r\n        return null;\r\n      case node.type === 'file' &&\r\n        (getFileType(node.name) === 'png' ||\r\n          getFileType(node.name) === 'gif' ||\r\n          getFileType(node.name) === 'jpg' ||\r\n          getFileType(node.name) === 'jpeg'):\r\n        toggleModal(true);\r\n        setSource(node.download_url);\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <StyledTreeNode\r\n        level={level}\r\n        type={node.type}\r\n        onClick={() => onClickSelector(node)}\r\n      >\r\n        <NodeIcon>\r\n          {node.type === 'dir' &&\r\n            (node.isOpen ? (\r\n              <CaretDown size=\"16\" color=\"white\" />\r\n            ) : (\r\n              <CaretRight size=\"16\" color=\"white\" />\r\n            ))}\r\n        </NodeIcon>\r\n        <NodeIcon marginRight={10}>{iconSelector(node)}</NodeIcon>\r\n        <span role=\"button\">{node.name}</span>\r\n      </StyledTreeNode>\r\n\r\n      {node.isOpen &&\r\n        getChildNodes(node).map(childNode => (\r\n          <MenuNode\r\n            key={childNode.path}\r\n            node={childNode}\r\n            level={level + 1}\r\n            getChildNodes={getChildNodes}\r\n            onToggle={onToggle}\r\n          />\r\n        ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nMenuNode.propTypes = {\r\n  node: PropTypes.object.isRequired,\r\n  level: PropTypes.number,\r\n  getChildNodes: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nMenuNode.defaultProps = {\r\n  node: null,\r\n  level: 0,\r\n  getChildNodes: () => null,\r\n  onToggle: () => null\r\n};\r\n\r\nexport default MenuNode;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MenuNode from './MenuNode';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTreeContainer = styled.div`\r\n  padding: 5px 8px;\r\n  padding-left: 5px;\r\n  padding-top: 1em;\r\n\r\n  background-color: #252526;\r\n  font-color: white;\r\n  height: 100%;\r\n`;\r\n\r\nconst MenuTree = ({ data }) => {\r\n  const [nodes, setNodes] = React.useState(data);\r\n  React.useEffect(() => {\r\n    setNodes(data);\r\n  }, [data]);\r\n\r\n  const getRootNodes = () => {\r\n    return Object.values(nodes).filter(node => node.isRoot === true);\r\n  };\r\n\r\n  const getChildNodes = node => {\r\n    if (!node.children) return [];\r\n    return node.children.map(path =>\r\n      Object.values(nodes).find(el => el.path === path)\r\n    );\r\n  };\r\n\r\n  const onToggle = node => {\r\n    let indexOfParent = Object.values(nodes).findIndex(\r\n      el => el.path === node.path\r\n    );\r\n    nodes[indexOfParent].isOpen = !node.isOpen;\r\n    setNodes({ ...nodes });\r\n  };\r\n\r\n  return (\r\n    <StyledTreeContainer>\r\n      {getRootNodes().map(node => (\r\n        <MenuNode\r\n          key={node.path}\r\n          node={node}\r\n          getChildNodes={getChildNodes}\r\n          onToggle={onToggle}\r\n        />\r\n      ))}\r\n    </StyledTreeContainer>\r\n  );\r\n};\r\n\r\nMenuTree.propTypes = {\r\n  data: PropTypes.array.isRequired\r\n};\r\n\r\nMenuTree.defaultProps = {\r\n  data: null\r\n};\r\n\r\nexport default MenuTree;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MenuTree from '../MenuTree';\r\nimport Axios from 'axios';\r\n\r\nconst createNode = (node, isRoot) => {\r\n  return {\r\n    path: node.path,\r\n    name: node.name,\r\n    type: node.type,\r\n    isRoot: isRoot,\r\n    children: [],\r\n    url: node.url,\r\n    download_url: node.download_url\r\n  };\r\n};\r\n\r\nasync function getFileTree(endpoint, level, result = [], parent = null) {\r\n  // Find all items at the current endpoint and make nodes\r\n  const files = await Axios(endpoint)\r\n    .then(res => res.data)\r\n    .then(data => {\r\n      let nodes = [];\r\n      data.forEach(node => {\r\n        // Create a node for each object found at the endpoint\r\n        let n = createNode(node, level > 0 ? false : true);\r\n        // if the current object has a parent, then add this node as a child to that parent\r\n        if (parent) parent.push(n.path);\r\n        // push the new node to result\r\n        result.push(n);\r\n        nodes.push(n);\r\n      });\r\n      return nodes;\r\n    });\r\n\r\n  // See if any of the items at the current endpoint are directories, if so - recursively get the content\r\n  await files.forEach(node => {\r\n    if (node.type === 'dir') {\r\n      getFileTree(node.url, level + 1, result, node.children);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nconst RepoMenu = ({ root }) => {\r\n  const [endpoint] = React.useState(root);\r\n\r\n  const [data, setData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    if (endpoint) {\r\n      getFileTree(endpoint, 0).then(res => {\r\n        setData(res);\r\n      });\r\n    }\r\n  }, [endpoint]);\r\n\r\n  if (data) return <MenuTree data={data} />;\r\n  return null;\r\n};\r\n\r\nRepoMenu.propTypes = {\r\n  root: PropTypes.string.isRequired\r\n};\r\n\r\nRepoMenu.defaultProps = {\r\n  root: null\r\n};\r\n\r\nexport default RepoMenu;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { ImageModalContext } from './index';\r\n\r\nconst ModalContainer = styled.div`\r\n  visibility: ${props => (props.show ? 'visible' : 'hidden')};\r\n  // background: #444444;\r\n  // background: #000000c2;\r\n  // border: 1px solid #222;\r\n  padding: 0.5em;\r\n  // box-shadow: -2rem 2rem 2rem rgba(black, 0.2);\r\n  z-index: 1000;\r\n\r\n  // height: 100vh;\r\n\r\n  position: relative;\r\n`;\r\n\r\n// const ModalContainer = styled.div`\r\n//   visibility: ${props => (props.show ? 'visible' : 'hidden')};\r\n//   height: 50%;\r\n//   width: 50%;\r\n\r\n//   position: absolute;\r\n//   // top: 2em;\r\n//   // right: 2em;\r\n//   margin-left: auto;\r\n//   margin-right: auto;\r\n//   z-index: 100;\r\n// `;\r\n\r\nconst ModalImage = styled.img`\r\n  max-width: 100vw;\r\n  border: 1em solid #222;\r\n  border-radius: 1em;\r\n  box-shadow: -2rem 2rem 2rem rgba(black, 0.2);\r\n`;\r\n\r\nconst ImageModal = () => {\r\n  const { show, source } = React.useContext(ImageModalContext);\r\n\r\n  return (\r\n    <ModalContainer show={show}>\r\n      <ModalImage src={source} />\r\n    </ModalContainer>\r\n  );\r\n};\r\n\r\nexport default ImageModal;\r\n","import React from 'react';\r\nimport { Grid, GridItem } from 'styled-grid-component';\r\nimport MarkdownBrowser from './components/MarkdownBrowser';\r\nimport { GithubContextProvider } from './components/GithubContext';\r\nimport { ImageModalContextProvider } from './components/ImageModalContext';\r\nimport RepoMenu from './components/RepoMenu';\r\nimport ImageModal from './components/ImageModalContext/ImageModal';\r\n\r\nfunction App() {\r\n  return (\r\n    <ImageModalContextProvider>\r\n      <Grid\r\n        width=\"100%\"\r\n        height=\"100vh\"\r\n        templateColumns=\"repeat(5, 1fr)\"\r\n        gap=\"10px\"\r\n        autoRows=\"minmax(100px, auto)\"\r\n      >\r\n        <GithubContextProvider\r\n          root=\"https://raw.githubusercontent.com/132nd-vWing/OPUF-Brief/master\"\r\n          rootFile=\"/README.md\"\r\n        >\r\n          <GridItem column=\"1\" row=\"1\">\r\n            <RepoMenu root=\"https://api.github.com/repos/132nd-vWing/OPUF-Brief/contents/\" />\r\n          </GridItem>\r\n          <GridItem column=\"2 / 6\" row=\"1\">\r\n            <MarkdownBrowser />\r\n          </GridItem>\r\n          <GridItem column=\"2 / 6\" row=\"1\">\r\n            <ImageModal />\r\n          </GridItem>\r\n        </GithubContextProvider>\r\n      </Grid>\r\n    </ImageModalContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}